name: Deploy Math & Language Synergy Website

on:
  push:
    branches: [ "master" ]  # Trigger on pushes to master branch
  workflow_dispatch:        # Allow manual triggering from GitHub UI

# Set required permissions for GitHub Pages
permissions:
  contents: read    # To checkout the code
  pages: write      # To deploy to GitHub Pages
  id-token: write   # For GitHub Pages authentication

jobs:
  deploy:
    runs-on: windows-latest  # Windows runner for compatibility
    
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    
    steps:
      # --------------------------------------------
      # STEP 1: Checkout repository
      # --------------------------------------------
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Get complete history for proper deployment
          
      # --------------------------------------------
      # STEP 2: Prepare Windows environment
      # --------------------------------------------
      - name: Setup PowerShell
        shell: pwsh
        run: |
          # Set execution policy for current session
          Set-ExecutionPolicy -ExecutionPolicy Unrestricted -Scope Process -Force
          Write-Host "PowerShell environment ready"
          
      # --------------------------------------------
      # STEP 3: Move files from public_html to root
      # --------------------------------------------
      - name: Prepare deployment files
        shell: pwsh
        run: |
          try {
              # Check if public_html exists
              if (Test-Path -Path "public_html" -PathType Container) {
                  Write-Host "Moving files from public_html to root directory..."
                  
                  # Get all items (including hidden files)
                  $items = Get-ChildItem -Path "public_html" -Force
                  
                  if ($items.Count -eq 0) {
                      Write-Warning "public_html directory is empty"
                  } else {
                      # Move each item to root
                      foreach ($item in $items) {
                          $destination = Join-Path -Path $PWD -ChildPath $item.Name
                          Move-Item -Path $item.FullName -Destination $destination -Force
                          Write-Host "Moved: $($item.Name)"
                      }
                      
                      # Remove empty directory
                      Remove-Item -Path "public_html" -Force -Recurse
                      Write-Host "File movement completed successfully"
                  }
              } else {
                  Write-Host "No public_html directory found - deploying root files directly"
              }
              
              # Verify essential files exist
              $requiredFiles = @("index.html", "css/style.css", "js/script.js")
              $missingFiles = @()
              
              foreach ($file in $requiredFiles) {
                  if (-not (Test-Path -Path $file -PathType Leaf)) {
                      $missingFiles += $file
                  }
              }
              
              if ($missingFiles.Count -gt 0) {
                  throw "Missing required files: $($missingFiles -join ', ')"
              }
              
              Write-Host "All required files verified"
          }
          catch {
              Write-Error $_.Exception.Message
              exit 1
          }
          
      # --------------------------------------------
      # STEP 4: Upload artifact for deployment
      # --------------------------------------------
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v2
        with:
          path: .  # Upload entire repository root
          
      # --------------------------------------------
      # STEP 5: Deploy to GitHub Pages
      # --------------------------------------------
      - name: Deploy
        id: deployment
        uses: actions/deploy-pages@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          timeout: 600  # 10 minute timeout
          
      # --------------------------------------------
      # STEP 6: Verify deployment
      # --------------------------------------------
      - name: Verify deployment
        shell: pwsh
        run: |
          $deploymentUrl = "${{ steps.deployment.outputs.page_url }}"
          
          if ([string]::IsNullOrEmpty($deploymentUrl)) {
              Write-Error "Deployment failed - no URL generated"
              exit 1
          }
          
          Write-Host "::notice title=Deployment Successful::Website deployed to $deploymentUrl"
          Write-Host "Deployment URL: $deploymentUrl"
          Write-Host "Full URL: https://hchristophernaoyuki.github.io/math-language-synergy-website/"
